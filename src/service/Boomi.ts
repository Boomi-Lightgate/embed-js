/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { OpenAPIConfig } from './core/OpenAPI';
import { AxiosHttpRequest } from './core/AxiosHttpRequest';
import { AccountService } from './services/AccountService';
import { AccountCloudAttachmentPropertiesService } from './services/AccountCloudAttachmentPropertiesService';
import { AccountCloudAttachmentQuotaService } from './services/AccountCloudAttachmentQuotaService';
import { AccountGroupService } from './services/AccountGroupService';
import { AccountGroupAccountService } from './services/AccountGroupAccountService';
import { AccountGroupIntegrationPackService } from './services/AccountGroupIntegrationPackService';
import { AccountGroupUserRoleService } from './services/AccountGroupUserRoleService';
import { AccountProvisionService } from './services/AccountProvisionService';
import { AccountSsoConfigService } from './services/AccountSsoConfigService';
import { AccountUserFederationService } from './services/AccountUserFederationService';
import { AccountUserRoleService } from './services/AccountUserRoleService';
import { ApiUsageCountService } from './services/ApiUsageCountService';
import { As2ConnectorRecordService } from './services/As2ConnectorRecordService';
import { AtomService } from './services/AtomService';
import { AtomAs2ArtifactsService } from './services/AtomAs2ArtifactsService';
import { AtomConnectionFieldExtensionSummaryService } from './services/AtomConnectionFieldExtensionSummaryService';
import { AtomConnectorVersionsService } from './services/AtomConnectorVersionsService';
import { AtomCountersService } from './services/AtomCountersService';
import { AtomDiskSpaceService } from './services/AtomDiskSpaceService';
import { AtomLogService } from './services/AtomLogService';
import { AtomPurgeService } from './services/AtomPurgeService';
import { AtomSecurityPoliciesService } from './services/AtomSecurityPoliciesService';
import { AtomStartupPropertiesService } from './services/AtomStartupPropertiesService';
import { AtomWorkerLogService } from './services/AtomWorkerLogService';
import { AuditLogService } from './services/AuditLogService';
import { BranchService } from './services/BranchService';
import { CancelExecutionService } from './services/CancelExecutionService';
import { ChangeListenerStatusService } from './services/ChangeListenerStatusService';
import { ClearQueueService } from './services/ClearQueueService';
import { CloudService } from './services/CloudService';
import { ComponentService } from './services/ComponentService';
import { ComponentAtomAttachmentService } from './services/ComponentAtomAttachmentService';
import { ComponentDiffRequestService } from './services/ComponentDiffRequestService';
import { ComponentEnvironmentAttachmentService } from './services/ComponentEnvironmentAttachmentService';
import { ComponentMetadataService } from './services/ComponentMetadataService';
import { ComponentReferenceService } from './services/ComponentReferenceService';
import { ConnectionLicensingReportService } from './services/ConnectionLicensingReportService';
import { ConnectorService } from './services/ConnectorService';
import { ConnectorDocumentService } from './services/ConnectorDocumentService';
import { CustomTrackedFieldService } from './services/CustomTrackedFieldService';
import { DeployedExpiredCertificateService } from './services/DeployedExpiredCertificateService';
import { DeployedPackageService } from './services/DeployedPackageService';
import { DeploymentService } from './services/DeploymentService';
import { DocumentCountAccountService } from './services/DocumentCountAccountService';
import { DocumentCountAccountGroupService } from './services/DocumentCountAccountGroupService';
import { EdiCustomConnectorRecordService } from './services/EdiCustomConnectorRecordService';
import { EdifactConnectorRecordService } from './services/EdifactConnectorRecordService';
import { EnvironmentService } from './services/EnvironmentService';
import { EnvironmentAtomAttachmentService } from './services/EnvironmentAtomAttachmentService';
import { EnvironmentConnectionFieldExtensionSummaryService } from './services/EnvironmentConnectionFieldExtensionSummaryService';
import { EnvironmentExtensionsService } from './services/EnvironmentExtensionsService';
import { EnvironmentMapExtensionService } from './services/EnvironmentMapExtensionService';
import { EnvironmentMapExtensionExternalComponentService } from './services/EnvironmentMapExtensionExternalComponentService';
import { EnvironmentMapExtensionsSummaryService } from './services/EnvironmentMapExtensionsSummaryService';
import { EnvironmentMapExtensionUserDefinedFunctionService } from './services/EnvironmentMapExtensionUserDefinedFunctionService';
import { EnvironmentMapExtensionUserDefinedFunctionSummaryService } from './services/EnvironmentMapExtensionUserDefinedFunctionSummaryService';
import { EnvironmentRoleService } from './services/EnvironmentRoleService';
import { EventService } from './services/EventService';
import { ExecuteProcessService } from './services/ExecuteProcessService';
import { ExecutionArtifactsService } from './services/ExecutionArtifactsService';
import { ExecutionConnectorService } from './services/ExecutionConnectorService';
import { ExecutionCountAccountService } from './services/ExecutionCountAccountService';
import { ExecutionCountAccountGroupService } from './services/ExecutionCountAccountGroupService';
import { ExecutionRecordService } from './services/ExecutionRecordService';
import { ExecutionRequestService } from './services/ExecutionRequestService';
import { ExecutionSummaryRecordService } from './services/ExecutionSummaryRecordService';
import { FolderService } from './services/FolderService';
import { GenericConnectorRecordService } from './services/GenericConnectorRecordService';
import { GetAssignableRolesService } from './services/GetAssignableRolesService';
import { Hl7ConnectorRecordService } from './services/Hl7ConnectorRecordService';
import { InstallerTokenService } from './services/InstallerTokenService';
import { IntegrationPackService } from './services/IntegrationPackService';
import { IntegrationPackAtomAttachmentService } from './services/IntegrationPackAtomAttachmentService';
import { IntegrationPackEnvironmentAttachmentService } from './services/IntegrationPackEnvironmentAttachmentService';
import { IntegrationPackInstanceService } from './services/IntegrationPackInstanceService';
import { JavaRollbackService } from './services/JavaRollbackService';
import { JavaUpgradeService } from './services/JavaUpgradeService';
import { ListenerStatusService } from './services/ListenerStatusService';
import { ListQueuesService } from './services/ListQueuesService';
import { MergeRequestService } from './services/MergeRequestService';
import { MoveQueueRequestService } from './services/MoveQueueRequestService';
import { NodeOffboardService } from './services/NodeOffboardService';
import { OdetteConnectorRecordService } from './services/OdetteConnectorRecordService';
import { Oftp2ConnectorRecordService } from './services/Oftp2ConnectorRecordService';
import { OrganizationComponentService } from './services/OrganizationComponentService';
import { PackagedComponentService } from './services/PackagedComponentService';
import { PackagedComponentManifestService } from './services/PackagedComponentManifestService';
import { PersistedProcessPropertiesService } from './services/PersistedProcessPropertiesService';
import { ProcessService } from './services/ProcessService';
import { ProcessAtomAttachmentService } from './services/ProcessAtomAttachmentService';
import { ProcessEnvironmentAttachmentService } from './services/ProcessEnvironmentAttachmentService';
import { ProcessLogService } from './services/ProcessLogService';
import { ProcessSchedulesService } from './services/ProcessSchedulesService';
import { ProcessScheduleStatusService } from './services/ProcessScheduleStatusService';
import { PublisherIntegrationPackService } from './services/PublisherIntegrationPackService';
import { ReleaseIntegrationPackService } from './services/ReleaseIntegrationPackService';
import { ReleaseIntegrationPackStatusService } from './services/ReleaseIntegrationPackStatusService';
import { RerunDocumentService } from './services/RerunDocumentService';
import { RoleService } from './services/RoleService';
import { RosettaNetConnectorRecordService } from './services/RosettaNetConnectorRecordService';
import { RuntimeReleaseScheduleService } from './services/RuntimeReleaseScheduleService';
import { RuntimeRestartRequestService } from './services/RuntimeRestartRequestService';
import { SharedCommunicationChannelComponentService } from './services/SharedCommunicationChannelComponentService';
import { SharedServerInformationService } from './services/SharedServerInformationService';
import { SharedWebServerService } from './services/SharedWebServerService';
import { SharedWebServerLogService } from './services/SharedWebServerLogService';
import { ThroughputAccountService } from './services/ThroughputAccountService';
import { ThroughputAccountGroupService } from './services/ThroughputAccountGroupService';
import { TradacomsConnectorRecordService } from './services/TradacomsConnectorRecordService';
import { TradingPartnerComponentService } from './services/TradingPartnerComponentService';
import { TradingPartnerProcessingGroupService } from './services/TradingPartnerProcessingGroupService';
import { WorkerService } from './services/WorkerService';
import { X12ConnectorRecordService } from './services/X12ConnectorRecordService';
type HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;
export class Boomi {
    public readonly account: AccountService;
    public readonly accountCloudAttachmentProperties: AccountCloudAttachmentPropertiesService;
    public readonly accountCloudAttachmentQuota: AccountCloudAttachmentQuotaService;
    public readonly accountGroup: AccountGroupService;
    public readonly accountGroupAccount: AccountGroupAccountService;
    public readonly accountGroupIntegrationPack: AccountGroupIntegrationPackService;
    public readonly accountGroupUserRole: AccountGroupUserRoleService;
    public readonly accountProvision: AccountProvisionService;
    public readonly accountSsoConfig: AccountSsoConfigService;
    public readonly accountUserFederation: AccountUserFederationService;
    public readonly accountUserRole: AccountUserRoleService;
    public readonly apiUsageCount: ApiUsageCountService;
    public readonly as2ConnectorRecord: As2ConnectorRecordService;
    public readonly atom: AtomService;
    public readonly atomAs2Artifacts: AtomAs2ArtifactsService;
    public readonly atomConnectionFieldExtensionSummary: AtomConnectionFieldExtensionSummaryService;
    public readonly atomConnectorVersions: AtomConnectorVersionsService;
    public readonly atomCounters: AtomCountersService;
    public readonly atomDiskSpace: AtomDiskSpaceService;
    public readonly atomLog: AtomLogService;
    public readonly atomPurge: AtomPurgeService;
    public readonly atomSecurityPolicies: AtomSecurityPoliciesService;
    public readonly atomStartupProperties: AtomStartupPropertiesService;
    public readonly atomWorkerLog: AtomWorkerLogService;
    public readonly auditLog: AuditLogService;
    public readonly branch: BranchService;
    public readonly cancelExecution: CancelExecutionService;
    public readonly changeListenerStatus: ChangeListenerStatusService;
    public readonly clearQueue: ClearQueueService;
    public readonly cloud: CloudService;
    public readonly component: ComponentService;
    public readonly componentAtomAttachment: ComponentAtomAttachmentService;
    public readonly componentDiffRequest: ComponentDiffRequestService;
    public readonly componentEnvironmentAttachment: ComponentEnvironmentAttachmentService;
    public readonly componentMetadata: ComponentMetadataService;
    public readonly componentReference: ComponentReferenceService;
    public readonly connectionLicensingReport: ConnectionLicensingReportService;
    public readonly connector: ConnectorService;
    public readonly connectorDocument: ConnectorDocumentService;
    public readonly customTrackedField: CustomTrackedFieldService;
    public readonly deployedExpiredCertificate: DeployedExpiredCertificateService;
    public readonly deployedPackage: DeployedPackageService;
    public readonly deployment: DeploymentService;
    public readonly documentCountAccount: DocumentCountAccountService;
    public readonly documentCountAccountGroup: DocumentCountAccountGroupService;
    public readonly ediCustomConnectorRecord: EdiCustomConnectorRecordService;
    public readonly edifactConnectorRecord: EdifactConnectorRecordService;
    public readonly environment: EnvironmentService;
    public readonly environmentAtomAttachment: EnvironmentAtomAttachmentService;
    public readonly environmentConnectionFieldExtensionSummary: EnvironmentConnectionFieldExtensionSummaryService;
    public readonly environmentExtensions: EnvironmentExtensionsService;
    public readonly environmentMapExtension: EnvironmentMapExtensionService;
    public readonly environmentMapExtensionExternalComponent: EnvironmentMapExtensionExternalComponentService;
    public readonly environmentMapExtensionsSummary: EnvironmentMapExtensionsSummaryService;
    public readonly environmentMapExtensionUserDefinedFunction: EnvironmentMapExtensionUserDefinedFunctionService;
    public readonly environmentMapExtensionUserDefinedFunctionSummary: EnvironmentMapExtensionUserDefinedFunctionSummaryService;
    public readonly environmentRole: EnvironmentRoleService;
    public readonly event: EventService;
    public readonly executeProcess: ExecuteProcessService;
    public readonly executionArtifacts: ExecutionArtifactsService;
    public readonly executionConnector: ExecutionConnectorService;
    public readonly executionCountAccount: ExecutionCountAccountService;
    public readonly executionCountAccountGroup: ExecutionCountAccountGroupService;
    public readonly executionRecord: ExecutionRecordService;
    public readonly executionRequest: ExecutionRequestService;
    public readonly executionSummaryRecord: ExecutionSummaryRecordService;
    public readonly folder: FolderService;
    public readonly genericConnectorRecord: GenericConnectorRecordService;
    public readonly getAssignableRoles: GetAssignableRolesService;
    public readonly hl7ConnectorRecord: Hl7ConnectorRecordService;
    public readonly installerToken: InstallerTokenService;
    public readonly integrationPack: IntegrationPackService;
    public readonly integrationPackAtomAttachment: IntegrationPackAtomAttachmentService;
    public readonly integrationPackEnvironmentAttachment: IntegrationPackEnvironmentAttachmentService;
    public readonly integrationPackInstance: IntegrationPackInstanceService;
    public readonly javaRollback: JavaRollbackService;
    public readonly javaUpgrade: JavaUpgradeService;
    public readonly listenerStatus: ListenerStatusService;
    public readonly listQueues: ListQueuesService;
    public readonly mergeRequest: MergeRequestService;
    public readonly moveQueueRequest: MoveQueueRequestService;
    public readonly nodeOffboard: NodeOffboardService;
    public readonly odetteConnectorRecord: OdetteConnectorRecordService;
    public readonly oftp2ConnectorRecord: Oftp2ConnectorRecordService;
    public readonly organizationComponent: OrganizationComponentService;
    public readonly packagedComponent: PackagedComponentService;
    public readonly packagedComponentManifest: PackagedComponentManifestService;
    public readonly persistedProcessProperties: PersistedProcessPropertiesService;
    public readonly process: ProcessService;
    public readonly processAtomAttachment: ProcessAtomAttachmentService;
    public readonly processEnvironmentAttachment: ProcessEnvironmentAttachmentService;
    public readonly processLog: ProcessLogService;
    public readonly processSchedules: ProcessSchedulesService;
    public readonly processScheduleStatus: ProcessScheduleStatusService;
    public readonly publisherIntegrationPack: PublisherIntegrationPackService;
    public readonly releaseIntegrationPack: ReleaseIntegrationPackService;
    public readonly releaseIntegrationPackStatus: ReleaseIntegrationPackStatusService;
    public readonly rerunDocument: RerunDocumentService;
    public readonly role: RoleService;
    public readonly rosettaNetConnectorRecord: RosettaNetConnectorRecordService;
    public readonly runtimeReleaseSchedule: RuntimeReleaseScheduleService;
    public readonly runtimeRestartRequest: RuntimeRestartRequestService;
    public readonly sharedCommunicationChannelComponent: SharedCommunicationChannelComponentService;
    public readonly sharedServerInformation: SharedServerInformationService;
    public readonly sharedWebServer: SharedWebServerService;
    public readonly sharedWebServerLog: SharedWebServerLogService;
    public readonly throughputAccount: ThroughputAccountService;
    public readonly throughputAccountGroup: ThroughputAccountGroupService;
    public readonly tradacomsConnectorRecord: TradacomsConnectorRecordService;
    public readonly tradingPartnerComponent: TradingPartnerComponentService;
    public readonly tradingPartnerProcessingGroup: TradingPartnerProcessingGroupService;
    public readonly worker: WorkerService;
    public readonly x12ConnectorRecord: X12ConnectorRecordService;
    public readonly request: BaseHttpRequest;
    constructor(config?: Partial<OpenAPIConfig>, HttpRequest: HttpRequestConstructor = AxiosHttpRequest) {
        this.request = new HttpRequest({
            BASE: config?.BASE ?? 'https://api.boomi.com/api/rest/v1/platform_account_ID',
            VERSION: config?.VERSION ?? '1.0.0',
            WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,
            CREDENTIALS: config?.CREDENTIALS ?? 'include',
            OVERRIDE_ACCOUNT: config?.OVERRIDE_ACCOUNT ?? false,
            OVERRIDE_ACCOUNT_ID: config?.OVERRIDE_ACCOUNT_ID,
            TOKEN: config?.TOKEN,
            USERNAME: config?.USERNAME,
            PASSWORD: config?.PASSWORD,
            HEADERS: config?.HEADERS,
            ENCODE_PATH: config?.ENCODE_PATH,
        });
        this.account = new AccountService(this.request);
        this.accountCloudAttachmentProperties = new AccountCloudAttachmentPropertiesService(this.request);
        this.accountCloudAttachmentQuota = new AccountCloudAttachmentQuotaService(this.request);
        this.accountGroup = new AccountGroupService(this.request);
        this.accountGroupAccount = new AccountGroupAccountService(this.request);
        this.accountGroupIntegrationPack = new AccountGroupIntegrationPackService(this.request);
        this.accountGroupUserRole = new AccountGroupUserRoleService(this.request);
        this.accountProvision = new AccountProvisionService(this.request);
        this.accountSsoConfig = new AccountSsoConfigService(this.request);
        this.accountUserFederation = new AccountUserFederationService(this.request);
        this.accountUserRole = new AccountUserRoleService(this.request);
        this.apiUsageCount = new ApiUsageCountService(this.request);
        this.as2ConnectorRecord = new As2ConnectorRecordService(this.request);
        this.atom = new AtomService(this.request);
        this.atomAs2Artifacts = new AtomAs2ArtifactsService(this.request);
        this.atomConnectionFieldExtensionSummary = new AtomConnectionFieldExtensionSummaryService(this.request);
        this.atomConnectorVersions = new AtomConnectorVersionsService(this.request);
        this.atomCounters = new AtomCountersService(this.request);
        this.atomDiskSpace = new AtomDiskSpaceService(this.request);
        this.atomLog = new AtomLogService(this.request);
        this.atomPurge = new AtomPurgeService(this.request);
        this.atomSecurityPolicies = new AtomSecurityPoliciesService(this.request);
        this.atomStartupProperties = new AtomStartupPropertiesService(this.request);
        this.atomWorkerLog = new AtomWorkerLogService(this.request);
        this.auditLog = new AuditLogService(this.request);
        this.branch = new BranchService(this.request);
        this.cancelExecution = new CancelExecutionService(this.request);
        this.changeListenerStatus = new ChangeListenerStatusService(this.request);
        this.clearQueue = new ClearQueueService(this.request);
        this.cloud = new CloudService(this.request);
        this.component = new ComponentService(this.request);
        this.componentAtomAttachment = new ComponentAtomAttachmentService(this.request);
        this.componentDiffRequest = new ComponentDiffRequestService(this.request);
        this.componentEnvironmentAttachment = new ComponentEnvironmentAttachmentService(this.request);
        this.componentMetadata = new ComponentMetadataService(this.request);
        this.componentReference = new ComponentReferenceService(this.request);
        this.connectionLicensingReport = new ConnectionLicensingReportService(this.request);
        this.connector = new ConnectorService(this.request);
        this.connectorDocument = new ConnectorDocumentService(this.request);
        this.customTrackedField = new CustomTrackedFieldService(this.request);
        this.deployedExpiredCertificate = new DeployedExpiredCertificateService(this.request);
        this.deployedPackage = new DeployedPackageService(this.request);
        this.deployment = new DeploymentService(this.request);
        this.documentCountAccount = new DocumentCountAccountService(this.request);
        this.documentCountAccountGroup = new DocumentCountAccountGroupService(this.request);
        this.ediCustomConnectorRecord = new EdiCustomConnectorRecordService(this.request);
        this.edifactConnectorRecord = new EdifactConnectorRecordService(this.request);
        this.environment = new EnvironmentService(this.request);
        this.environmentAtomAttachment = new EnvironmentAtomAttachmentService(this.request);
        this.environmentConnectionFieldExtensionSummary = new EnvironmentConnectionFieldExtensionSummaryService(this.request);
        this.environmentExtensions = new EnvironmentExtensionsService(this.request);
        this.environmentMapExtension = new EnvironmentMapExtensionService(this.request);
        this.environmentMapExtensionExternalComponent = new EnvironmentMapExtensionExternalComponentService(this.request);
        this.environmentMapExtensionsSummary = new EnvironmentMapExtensionsSummaryService(this.request);
        this.environmentMapExtensionUserDefinedFunction = new EnvironmentMapExtensionUserDefinedFunctionService(this.request);
        this.environmentMapExtensionUserDefinedFunctionSummary = new EnvironmentMapExtensionUserDefinedFunctionSummaryService(this.request);
        this.environmentRole = new EnvironmentRoleService(this.request);
        this.event = new EventService(this.request);
        this.executeProcess = new ExecuteProcessService(this.request);
        this.executionArtifacts = new ExecutionArtifactsService(this.request);
        this.executionConnector = new ExecutionConnectorService(this.request);
        this.executionCountAccount = new ExecutionCountAccountService(this.request);
        this.executionCountAccountGroup = new ExecutionCountAccountGroupService(this.request);
        this.executionRecord = new ExecutionRecordService(this.request);
        this.executionRequest = new ExecutionRequestService(this.request);
        this.executionSummaryRecord = new ExecutionSummaryRecordService(this.request);
        this.folder = new FolderService(this.request);
        this.genericConnectorRecord = new GenericConnectorRecordService(this.request);
        this.getAssignableRoles = new GetAssignableRolesService(this.request);
        this.hl7ConnectorRecord = new Hl7ConnectorRecordService(this.request);
        this.installerToken = new InstallerTokenService(this.request);
        this.integrationPack = new IntegrationPackService(this.request);
        this.integrationPackAtomAttachment = new IntegrationPackAtomAttachmentService(this.request);
        this.integrationPackEnvironmentAttachment = new IntegrationPackEnvironmentAttachmentService(this.request);
        this.integrationPackInstance = new IntegrationPackInstanceService(this.request);
        this.javaRollback = new JavaRollbackService(this.request);
        this.javaUpgrade = new JavaUpgradeService(this.request);
        this.listenerStatus = new ListenerStatusService(this.request);
        this.listQueues = new ListQueuesService(this.request);
        this.mergeRequest = new MergeRequestService(this.request);
        this.moveQueueRequest = new MoveQueueRequestService(this.request);
        this.nodeOffboard = new NodeOffboardService(this.request);
        this.odetteConnectorRecord = new OdetteConnectorRecordService(this.request);
        this.oftp2ConnectorRecord = new Oftp2ConnectorRecordService(this.request);
        this.organizationComponent = new OrganizationComponentService(this.request);
        this.packagedComponent = new PackagedComponentService(this.request);
        this.packagedComponentManifest = new PackagedComponentManifestService(this.request);
        this.persistedProcessProperties = new PersistedProcessPropertiesService(this.request);
        this.process = new ProcessService(this.request);
        this.processAtomAttachment = new ProcessAtomAttachmentService(this.request);
        this.processEnvironmentAttachment = new ProcessEnvironmentAttachmentService(this.request);
        this.processLog = new ProcessLogService(this.request);
        this.processSchedules = new ProcessSchedulesService(this.request);
        this.processScheduleStatus = new ProcessScheduleStatusService(this.request);
        this.publisherIntegrationPack = new PublisherIntegrationPackService(this.request);
        this.releaseIntegrationPack = new ReleaseIntegrationPackService(this.request);
        this.releaseIntegrationPackStatus = new ReleaseIntegrationPackStatusService(this.request);
        this.rerunDocument = new RerunDocumentService(this.request);
        this.role = new RoleService(this.request);
        this.rosettaNetConnectorRecord = new RosettaNetConnectorRecordService(this.request);
        this.runtimeReleaseSchedule = new RuntimeReleaseScheduleService(this.request);
        this.runtimeRestartRequest = new RuntimeRestartRequestService(this.request);
        this.sharedCommunicationChannelComponent = new SharedCommunicationChannelComponentService(this.request);
        this.sharedServerInformation = new SharedServerInformationService(this.request);
        this.sharedWebServer = new SharedWebServerService(this.request);
        this.sharedWebServerLog = new SharedWebServerLogService(this.request);
        this.throughputAccount = new ThroughputAccountService(this.request);
        this.throughputAccountGroup = new ThroughputAccountGroupService(this.request);
        this.tradacomsConnectorRecord = new TradacomsConnectorRecordService(this.request);
        this.tradingPartnerComponent = new TradingPartnerComponentService(this.request);
        this.tradingPartnerProcessingGroup = new TradingPartnerProcessingGroupService(this.request);
        this.worker = new WorkerService(this.request);
        this.x12ConnectorRecord = new X12ConnectorRecordService(this.request);
    }
}

